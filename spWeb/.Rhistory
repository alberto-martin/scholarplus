# CITING AUTHORS
citingAuthors <- list()
citingAuthorsIds <- list()
for (a in 1:length(citesData$organic_results$publication_info$authors)) {
citingAuthor <- citesData$organic_results$publication_info$authors[[a]]$name
citingAuthorId <- citesData$organic_results$publication_info$authors[[a]]$author_id
for (i in 1:length(citingAuthor)) {
author <- citingAuthor[[i]]
if (!(citingAuthorId %in% citingAuthorsIds)) {
citingAuthorsIds <- c(citingAuthorsIds, citingAuthorId)
citingAuthors <-  c(citingAuthors, author)
}
}
}
top5citingAuthors <- head(citingAuthors, 5)
p <- plot_ly(mtcars, x = ~mpg, y = ~wt, type = 'scatter', mode = 'markers')
runApp('ScholarP')
# to store functions and other code
library(shiny)
library(shinyjs)
library(shinydashboard)
library(bootstrap)
library(data.table)
library(dplyr)
library(rjson)
library(purrr)
library(tidyverse)
library(jsonlite)
library(plotly)
# READ JSON
authorData <- fromJSON("data/kyTHOh0AAAAJ.json")
# AUTHOR IMAGE
# COMPROBAMOS SI EL DIRECTORIO PARA GUARDAR LAS IMAGENES EXISTE
# Y SI NO EXISTE SE CREA
profImgDir <- 'ScholarP/www/profile_images'
if (!dir.exists(profImgDir)) {
dir.create(profImgDir)
}
# ALMACENAMOS LA URL LA IMAGEN
srcImage <- authorData$author$thumbnail
# DESCARGAMOS LA IMAGEN COMPROBANDO PRIMERO SI YA LA TENEMOS
# EN TAL CASO NO LA VOLVEMOS A DESCARGAR
pathAuthImage <- paste0(profImgDir,'/',
authorData$search_parameters$author_id,
'.jpg')
if(!file.exists(pathAuthImage)) {
download.file(srcImage,
pathAuthImage,
mode = 'wb')
}
# CREAMOS LA VARIABLE PARA PASARLE AL SERVER LA IMAGEN DESCARGADA
pathImage <- paste0('profile_images/',
authorData$search_parameters$author_id,
'.jpg')
# AUTHOR NAME
authorName <- authorData$author$name
# AUTHOR AFF
authorAff <- authorData$author$affiliations
# SERPAPI NO EXTRAE EL ENLACEDE LA UNIVERSIDAD
# AUTHOR EMAIL
emailPrevText <- authorData$author$email
emailsURLs <- authorData$author$website
# AUTHOR AREAS
areaNames <- authorData$author$interests$title
areaURLs <- authorData$author$interests$link
# CO-AUTHORS
top5Coll <- head(authorData$co_authors$name, 5)
# METRICS TABLE
metTabCitTot <- authorData$cited_by$table$citations$all[1]
metTabCit5y <- authorData$cited_by$table$citations[2][[1]][1]
metTabHiTot <- authorData$cited_by$table$h_index$all[2]
metTabHi5y <- authorData$cited_by$table$h_index[2][[1]][2]
metTabHi10Tot <- authorData$cited_by$table$i10_index$all[3]
metTabHi105y <- authorData$cited_by$table$i10_index[2][[1]][3]
# DOCUMENTS
authorArticles <- authorData$articles
authorData$articles$title[1]
authorData$articles$link[1]
authorData$articles$authors[1]
authorData$articles$publication[1]
authorData$articles$cited_by$value[1]
authorData$articles$cited_by$link[1]
# CITES PLOT
plotData <- tail(authorData$cited_by$graph, 7)
# CITED BY
id_cita <- strsplit(authorData$articles$cited_by$cites_id[1], ",")[[1]][1]
citesData <- fromJSON(paste0("cites/", id_cita, ".json"), flatten = FALSE)
# CITING AUTHORS
citingAuthors <- list()
citingAuthorsIds <- list()
for (a in 1:length(citesData$organic_results$publication_info$authors)) {
citingAuthor <- citesData$organic_results$publication_info$authors[[a]]$name
citingAuthorId <- citesData$organic_results$publication_info$authors[[a]]$author_id
for (i in 1:length(citingAuthor)) {
author <- citingAuthor[[i]]
if (!(citingAuthorId %in% citingAuthorsIds)) {
citingAuthorsIds <- c(citingAuthorsIds, citingAuthorId)
citingAuthors <-  c(citingAuthors, author)
}
}
}
top5citingAuthors <- head(citingAuthors, 5)
p <- plot_ly(mtcars, x = ~mpg, y = ~wt, type = 'scatter', mode = 'markers')
runApp('ScholarP')
runApp('ScholarP')
shiny::runApp('ScholarP')
# to store functions and other code
library(shiny)
library(shinyjs)
library(shinydashboard)
library(bootstrap)
library(data.table)
library(dplyr)
library(rjson)
library(purrr)
library(tidyverse)
library(jsonlite)
library(plotly)
# READ JSON
authorData <- fromJSON("data/kyTHOh0AAAAJ.json")
# AUTHOR IMAGE
# COMPROBAMOS SI EL DIRECTORIO PARA GUARDAR LAS IMAGENES EXISTE
# Y SI NO EXISTE SE CREA
profImgDir <- 'ScholarP/www/profile_images'
if (!dir.exists(profImgDir)) {
dir.create(profImgDir)
}
# ALMACENAMOS LA URL LA IMAGEN
srcImage <- authorData$author$thumbnail
# DESCARGAMOS LA IMAGEN COMPROBANDO PRIMERO SI YA LA TENEMOS
# EN TAL CASO NO LA VOLVEMOS A DESCARGAR
pathAuthImage <- paste0(profImgDir,'/',
authorData$search_parameters$author_id,
'.jpg')
if(!file.exists(pathAuthImage)) {
download.file(srcImage,
pathAuthImage,
mode = 'wb')
}
# CREAMOS LA VARIABLE PARA PASARLE AL SERVER LA IMAGEN DESCARGADA
pathImage <- paste0('profile_images/',
authorData$search_parameters$author_id,
'.jpg')
# AUTHOR NAME
authorName <- authorData$author$name
# AUTHOR AFF
authorAff <- authorData$author$affiliations
# SERPAPI NO EXTRAE EL ENLACEDE LA UNIVERSIDAD
# AUTHOR EMAIL
emailPrevText <- authorData$author$email
emailsURLs <- authorData$author$website
# AUTHOR AREAS
areaNames <- authorData$author$interests$title
areaURLs <- authorData$author$interests$link
# CO-AUTHORS
top5Coll <- head(authorData$co_authors$name, 5)
# METRICS TABLE
metTabCitTot <- authorData$cited_by$table$citations$all[1]
metTabCit5y <- authorData$cited_by$table$citations[2][[1]][1]
metTabHiTot <- authorData$cited_by$table$h_index$all[2]
metTabHi5y <- authorData$cited_by$table$h_index[2][[1]][2]
metTabHi10Tot <- authorData$cited_by$table$i10_index$all[3]
metTabHi105y <- authorData$cited_by$table$i10_index[2][[1]][3]
# DOCUMENTS
authorArticles <- authorData$articles
authorData$articles$title[1]
authorData$articles$link[1]
authorData$articles$authors[1]
authorData$articles$publication[1]
authorData$articles$cited_by$value[1]
authorData$articles$cited_by$link[1]
# CITES PLOT
plotData <- tail(authorData$cited_by$graph, 7)
# CITED BY
id_cita <- strsplit(authorData$articles$cited_by$cites_id[1], ",")[[1]][1]
citesData <- fromJSON(paste0("cites/", id_cita, ".json"), flatten = FALSE)
# CITING AUTHORS
citingAuthors <- list()
citingAuthorsIds <- list()
for (a in 1:length(citesData$organic_results$publication_info$authors)) {
citingAuthor <- citesData$organic_results$publication_info$authors[[a]]$name
citingAuthorId <- citesData$organic_results$publication_info$authors[[a]]$author_id
for (i in 1:length(citingAuthor)) {
author <- citingAuthor[[i]]
if (!(citingAuthorId %in% citingAuthorsIds)) {
citingAuthorsIds <- c(citingAuthorsIds, citingAuthorId)
citingAuthors <-  c(citingAuthors, author)
}
}
}
top5citingAuthors <- head(citingAuthors, 5)
p <- plot_ly(mtcars, x = ~mpg, y = ~wt, type = 'scatter', mode = 'markers')
runApp('ScholarP')
runApp('ScholarP')
runApp('ScholarP')
shiny::runApp('ScholarP')
runApp('ScholarP')
runApp('ScholarP')
runApp('ScholarP')
# to store functions and other code
library(shiny)
library(shinyjs)
library(shinydashboard)
library(bootstrap)
library(data.table)
library(dplyr)
library(rjson)
library(purrr)
library(tidyverse)
library(jsonlite)
library(plotly)
# READ JSON
authorData <- fromJSON("data/kyTHOh0AAAAJ.json")
# AUTHOR IMAGE
# COMPROBAMOS SI EL DIRECTORIO PARA GUARDAR LAS IMAGENES EXISTE
# Y SI NO EXISTE SE CREA
profImgDir <- 'ScholarP/www/profile_images'
if (!dir.exists(profImgDir)) {
dir.create(profImgDir)
}
# ALMACENAMOS LA URL LA IMAGEN
srcImage <- authorData$author$thumbnail
# DESCARGAMOS LA IMAGEN COMPROBANDO PRIMERO SI YA LA TENEMOS
# EN TAL CASO NO LA VOLVEMOS A DESCARGAR
pathAuthImage <- paste0(profImgDir,'/',
authorData$search_parameters$author_id,
'.jpg')
if(!file.exists(pathAuthImage)) {
download.file(srcImage,
pathAuthImage,
mode = 'wb')
}
# CREAMOS LA VARIABLE PARA PASARLE AL SERVER LA IMAGEN DESCARGADA
pathImage <- paste0('profile_images/',
authorData$search_parameters$author_id,
'.jpg')
# AUTHOR NAME
authorName <- authorData$author$name
# AUTHOR AFF
authorAff <- authorData$author$affiliations
# SERPAPI NO EXTRAE EL ENLACEDE LA UNIVERSIDAD
# AUTHOR EMAIL
emailPrevText <- authorData$author$email
emailsURLs <- authorData$author$website
# AUTHOR AREAS
areaNames <- authorData$author$interests$title
areaURLs <- authorData$author$interests$link
# CO-AUTHORS
top5Coll <- head(authorData$co_authors$name, 5)
# METRICS TABLE
metTabCitTot <- authorData$cited_by$table$citations$all[1]
metTabCit5y <- authorData$cited_by$table$citations[2][[1]][1]
metTabHiTot <- authorData$cited_by$table$h_index$all[2]
metTabHi5y <- authorData$cited_by$table$h_index[2][[1]][2]
metTabHi10Tot <- authorData$cited_by$table$i10_index$all[3]
metTabHi105y <- authorData$cited_by$table$i10_index[2][[1]][3]
# DOCUMENTS
authorArticles <- authorData$articles
authorData$articles$title[1]
authorData$articles$link[1]
authorData$articles$authors[1]
authorData$articles$publication[1]
authorData$articles$cited_by$value[1]
authorData$articles$cited_by$link[1]
# CITES PLOT
plotData <- tail(authorData$cited_by$graph, 7)
# CITED BY
id_cita <- strsplit(authorData$articles$cited_by$cites_id[1], ",")[[1]][1]
citesData <- fromJSON(paste0("cites/", id_cita, ".json"), flatten = FALSE)
# CITING AUTHORS
citingAuthors <- list()
citingAuthorsIds <- list()
for (a in 1:length(citesData$organic_results$publication_info$authors)) {
citingAuthor <- citesData$organic_results$publication_info$authors[[a]]$name
citingAuthorId <- citesData$organic_results$publication_info$authors[[a]]$author_id
for (i in 1:length(citingAuthor)) {
author <- citingAuthor[[i]]
if (!(citingAuthorId %in% citingAuthorsIds)) {
citingAuthorsIds <- c(citingAuthorsIds, citingAuthorId)
citingAuthors <-  c(citingAuthors, author)
}
}
}
top5citingAuthors <- head(citingAuthors, 5)
p <- plot_ly(mtcars, x = ~mpg, y = ~wt, type = 'scatter', mode = 'markers')
runApp('ScholarP')
runApp('ScholarP')
# to store functions and other code
library(shiny)
library(shinyjs)
library(shinydashboard)
library(bootstrap)
library(data.table)
library(dplyr)
library(rjson)
library(purrr)
library(tidyverse)
library(jsonlite)
library(plotly)
# READ JSON
authorData <- fromJSON("data/kyTHOh0AAAAJ.json")
# AUTHOR IMAGE
# COMPROBAMOS SI EL DIRECTORIO PARA GUARDAR LAS IMAGENES EXISTE
# Y SI NO EXISTE SE CREA
profImgDir <- 'ScholarP/www/profile_images'
if (!dir.exists(profImgDir)) {
dir.create(profImgDir)
}
# ALMACENAMOS LA URL LA IMAGEN
srcImage <- authorData$author$thumbnail
# DESCARGAMOS LA IMAGEN COMPROBANDO PRIMERO SI YA LA TENEMOS
# EN TAL CASO NO LA VOLVEMOS A DESCARGAR
pathAuthImage <- paste0(profImgDir,'/',
authorData$search_parameters$author_id,
'.jpg')
if(!file.exists(pathAuthImage)) {
download.file(srcImage,
pathAuthImage,
mode = 'wb')
}
# CREAMOS LA VARIABLE PARA PASARLE AL SERVER LA IMAGEN DESCARGADA
pathImage <- paste0('profile_images/',
authorData$search_parameters$author_id,
'.jpg')
# AUTHOR NAME
authorName <- authorData$author$name
# AUTHOR AFF
authorAff <- authorData$author$affiliations
# SERPAPI NO EXTRAE EL ENLACEDE LA UNIVERSIDAD
# AUTHOR EMAIL
emailPrevText <- authorData$author$email
emailsURLs <- authorData$author$website
# AUTHOR AREAS
areaNames <- authorData$author$interests$title
areaURLs <- authorData$author$interests$link
# CO-AUTHORS
top5Coll <- head(authorData$co_authors$name, 5)
# METRICS TABLE
metTabCitTot <- authorData$cited_by$table$citations$all[1]
metTabCit5y <- authorData$cited_by$table$citations[2][[1]][1]
metTabHiTot <- authorData$cited_by$table$h_index$all[2]
metTabHi5y <- authorData$cited_by$table$h_index[2][[1]][2]
metTabHi10Tot <- authorData$cited_by$table$i10_index$all[3]
metTabHi105y <- authorData$cited_by$table$i10_index[2][[1]][3]
# DOCUMENTS
authorArticles <- authorData$articles
authorData$articles$title[1]
authorData$articles$link[1]
authorData$articles$authors[1]
authorData$articles$publication[1]
authorData$articles$cited_by$value[1]
authorData$articles$cited_by$link[1]
# CITES PLOT
plotData <- tail(authorData$cited_by$graph, 7)
# CITED BY
id_cita <- strsplit(authorData$articles$cited_by$cites_id[1], ",")[[1]][1]
citesData <- fromJSON(paste0("cites/", id_cita, ".json"), flatten = FALSE)
# CITING AUTHORS
citingAuthors <- list()
citingAuthorsIds <- list()
for (a in 1:length(citesData$organic_results$publication_info$authors)) {
citingAuthor <- citesData$organic_results$publication_info$authors[[a]]$name
citingAuthorId <- citesData$organic_results$publication_info$authors[[a]]$author_id
for (i in 1:length(citingAuthor)) {
author <- citingAuthor[[i]]
if (!(citingAuthorId %in% citingAuthorsIds)) {
citingAuthorsIds <- c(citingAuthorsIds, citingAuthorId)
citingAuthors <-  c(citingAuthors, author)
}
}
}
top5citingAuthors <- head(citingAuthors, 5)
p <- plot_ly(mtcars, x = ~mpg, y = ~wt, type = 'scatter', mode = 'markers')
dt_personal_info <- readRDS("D:/Estudios/Universidad/MÁSTER/TFM/dt_personal_info.rds")
View(dt_personal_info)
typeof(dt_personal_info)
View(dt_personal_info)
typeof(dt_personal_info$mail)
typeof(dt_personal_info$author_id)
typeof(dt_personal_info$web)
typeof(dt_personal_info$hindex_last5)
typeof(dt_personal_info$citations_total)
typeof(dt_personal_info$i10_last5)
typeof(dt_personal_info$i10_total)
typeof(dt_personal_info$hindex_total)
typeof(dt_personal_info$citations_last5)
typeof(dt_personal_info$more_articles)
typeof(dt_personal_info$name)
typeof(dt_personal_info$n_pub)
typeof(dt_personal_info$prof_image)
typeof(dt_personal_info$affiliation)
typeof(dt_personal_info$inst_id)
typeof(dt_personal_info$author_num_id)
is.na(dt_personal_info$mail)
is.na(dt_personal_info$mail)
grep("TRUE", is.na(dt_personal_info$mail))
grep("TRUE", is.na(dt_personal_info$author_id))
grepl("TRUE", is.na(dt_personal_info$author_id))
grep("TRUE", is.na(dt_personal_info$author_id))
grepl("TRUE", is.na(dt_personal_info$author_id))
grep("TRUE", is.na(dt_personal_info$author_id))
grep("TRUE", is.na(dt_personal_info$author_id))
count(grep("TRUE", is.na(dt_personal_info$author_id)))
sum(grep("TRUE", is.na(dt_personal_info$author_id)))
sum(grep("TRUE", is.na(dt_personal_info$mail)))
summary(dt_personal_info)
summary(dt_personal_info$mail)
sum(grep("TRUE", is.na(dt_personal_info$mail)))
sum(grepl("TRUE", is.na(dt_personal_info$mail)))
sum(grepl("TRUE", is.na(dt_personal_info$mail)))
sum(grepl("TRUE", is.na(dt_personal_info$author_id)))
sum(grepl("TRUE", is.na(dt_personal_info$web)))
sum(grepl("TRUE", is.na(dt_personal_info)))
sum(grepl("TRUE", is.na(dt_personal_info$hindex_last5)))
sum(grepl("TRUE", is.na(dt_personal_info$citations_total)))
sum(grepl("TRUE", is.na(dt_personal_info$i10_last5)))
sum(grepl("TRUE", is.na(dt_personal_info$i10_total)))
sum(grepl("TRUE", is.na(dt_personal_info$hindex_total)))
sum(grepl("TRUE", is.na(dt_personal_info$citations_last5)))
sum(grepl("TRUE", is.na(dt_personal_info$more_articles)))
sum(grepl("TRUE", is.na(dt_personal_info$name)))
sum(grepl("TRUE", is.na(dt_personal_info$n_pub)))
sum(grepl("TRUE", is.na(dt_personal_info$prof_image)))
sum(grepl("TRUE", is.na(dt_personal_info$affiliation)))
sum(grepl("TRUE", is.na(dt_personal_info$inst_id)))
sum(grepl("TRUE", is.na(dt_personal_info$author_num_id)))
sum(grepl("TRUE", is.na(dt_personal_info$web)))
sum(grepl("", dt_personal_info$web))
sum(grepl("", dt_personal_info$web))
sum(grepl("", dt_personal_info$mail))
sum(grepl(" ", dt_personal_info$mail))
sum(grepl(" ", dt_personal_info$web))
de_pers
dt_personal_info$web
dt_personal_info$web[3]
dt_personal_info$web[4]
summary(dt_personal_info$web)
sum(grep("", dt_personal_info$web))
grep("", dt_personal_info$web)
grep(" ", dt_personal_info$web)
grep("\\s", dt_personal_info$web)
grep("\", dt_personal_info$web)
grep("\\", dt_personal_info$web)
length(dt_personal_info$web)
nchar(dt_personal_info$web)
grep("0", nchar(dt_personal_info$web))
grepl("0", nchar(dt_personal_info$web))
sum(grepl("0", nchar(dt_personal_info$web)))
sum(grepl("0", nchar(dt_personal_info$web)))
lapply(dt_personal_info, grepl("0", nchar()))
sum(grepl("0", nchar(dt_personal_info$web)))
sum(grepl("0", nchar(dt_personal_info$mail)))
sum(grepl("0", nchar(dt_personal_info$mail)))
grep("0", nchar(dt_personal_info$mail))
dt_personal_info[8280]
dt_personal_info[9393]
dt_personal_info[9393]
dt_personal_info$mail[9393]
dt_personal_info$mail[9393]
grep("0", nchar(dt_personal_info$mail))
grep("0", nchar(dt_personal_info$mail[9393]))
nchar(dt_personal_info$mail[9393])
grep(0, nchar(dt_personal_info$mail[9393]))
grep(<1, nchar(dt_personal_info$mail[9393]))
is.character(dt_personal_info$web])
is.character(dt_personal_info$web)
is.character(dt_personal_info$web[2])
dt_personal_info$web[2]
dt_personal_info$web
dim(dt_personal_info$web)
nchar?
?nchar
?grep
grep(0, nchar(dt_personal_info$mail[9393]))
grep(0, nchar(dt_personal_info$mail[9393]), value = TRUE)
grep(0, nchar(dt_personal_info$mail[9393]), value = TRUE, fixed = TRUE)
grep(0, nchar(dt_personal_info$mail[9393]), value = TRUE, fixed = FALSE)
grep(0, nchar(dt_personal_info$mail[9393]), value = TRUE, useBytes = TRUE)
grep(0, nchar(dt_personal_info$mail[9393]), value = TRUE, fixed = TRUE)
grep("0", nchar(dt_personal_info$mail[9393]), value = TRUE, fixed = TRUE)
grep("^[0]", nchar(dt_personal_info$mail[9393]), value = TRUE, fixed = TRUE)
grep("^[0]", nchar(dt_personal_info$mail[9393]), value = TRUE)
grep("^[0]", nchar(dt_personal_info$mail[9393]))
grep("^[0]", nchar(dt_personal_info$mail))
grep("^[0]", nchar(dt_personal_info$web))
grep("^[0]", nchar(dt_personal_info$web), value = TRUE)
grep("^[0]", nchar(dt_personal_info$web))
dt_personal_info$web[1146]
dt_personal_info$web[4]
grep("^[0]", nchar(dt_personal_info$web))
grepl("^[0]", nchar(dt_personal_info$web))
sum(grepl("^[0]", nchar(dt_personal_info$web)))
grep("^[0]", nchar(dt_personal_info$web))
sum(grepl("^[0]", nchar(dt_personal_info$web)))
dt_personal_info <- readRDS("D:/Estudios/Universidad/MÁSTER/TFM/dt_personal_info.rds")
View(dt_personal_info)
sum(grepl("^[0]", nchar(dt_personal_info$web)))
sum(grepl("^[0]", nchar(dt_personal_info$mail)))
sum(grepl("^[0]", nchar(dt_personal_info$author_id)))
sum(grepl("^[0]", nchar(dt_personal_info$hindex_last5)))
sum(grepl("^[0]", nchar(dt_personal_info$citations_total)))
sum(grepl("^[0]", nchar(dt_personal_info$i10_last5)))
sum(grepl("^[0]", nchar(dt_personal_info$i10_total)))
sum(grepl("^[0]", nchar(dt_personal_info$hindex_total)))
sum(grepl("^[0]", nchar(dt_personal_info$citations_last5)))
sum(grepl("^[0]", nchar(dt_personal_info$more_articles)))
sum(grepl("^[0]", nchar(dt_personal_info$name)))
sum(grepl("^[0]", nchar(dt_personal_info$n_pub)))
sum(grepl("^[0]", nchar(dt_personal_info$prof_image)))
sum(grepl("^[0]", nchar(dt_personal_info$affiliation)))
sum(grepl("^[0]", nchar(dt_personal_info$inst_id)))
sum(grepl("^[0]", nchar(dt_personal_info$author_num_id)))
